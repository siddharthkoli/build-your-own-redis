tcp -> stream of bytes
protocol assembles the bytes into packets

multiple apps use the same number. how does the computer know what app a packet belongs to? -> it uses ports. this is called demultiplexing. 
port number is 16bit number. computer uses the following 4-tuple to identify the flow of info: (src_ip, src_port, dest_ip, dest_port)

tcp provides a byte stream, but we cannot directly interpret this byte stream. so we can either add a message layer to tcp or add reliable ordering to udp. 
the former is easier.


a socket is a handle used to refer to a connection.
on linux handle is called a file_descriptor (fd) and it's local to a process. nothing to do with files nor does it describe anything.
socket() method allocates a socket fd which is used to create the connection. this handle should be closed when done to free up resources.

listening on a socket is telling the os that the app is ready to accept tcp connections. the connection is also represented as a socket.
so there are 2 types of sockets: listening socket and connection socket.
the os first returns a listening socket to an app. this listening socket is then used by the app to accept tcp connections. this connection is represented by a connection socket handle.

creating a listening socket requires atleast 3 api calls:
1. obtain socket handle via socket()
2. set listening ip:port via bind()
3. create a listening socket via listen()

then we can use accept() to wait for incoming tcp connections.
pseudo code:
fd = socket()
bind(fd, address)
listen(fd)
while (true)
    conn_fd = accept(fd)
    do_something_with(conn_fd)
    close(conn_fd)

from the client side:
1. obtain handle using socket()
2. create conn socket using connect()

pseudo code:
fd = socket()
connect(fd, address)
do_something_with(fd)
close(fd)

socket() creates a typeless socket; the type (connection or listening) is determined after the connect() or listen() call.

tcp and udp share the same socket api, but different implementation. both have send() and recv() methods.
for message based udp: send/recv correspond to packets.
for byte-stream based tcp: send/recv correspond to appending to/consuming from the byte-stream.

